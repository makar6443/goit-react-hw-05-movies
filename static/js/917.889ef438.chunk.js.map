{"version":3,"file":"static/js/917.889ef438.chunk.js","mappings":"qQAEaA,EAAUC,EAAAA,GAAAA,IAAH,uEAIPC,EAAWD,EAAAA,GAAAA,GAAH,4LASRE,EAAWF,EAAAA,GAAAA,GAAH,8D,SC2CrB,EAjDiB,WACf,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,IAfAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,GACXI,MAAM,sCAAD,OACmCH,EADnC,qEAGFI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IACRF,MAAK,SAAAG,GACJ,IAAQX,EAASW,EAATX,KACRC,EAAQD,EACT,IACAY,OAAM,WACLC,EAAAA,GAAAA,MAAY,uBACb,IACAC,SAAQ,kBAAMX,GAAW,EAAjB,GACZ,GAAE,CAACC,IACAF,EACF,OAAO,SAACa,EAAA,EAAD,IAMT,OAAOf,EAAKgB,QACV,SAACrB,EAAD,WACE,SAACE,EAAD,UACGG,EAAKiB,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAApB,OACR,UAACtB,EAAD,YACE,gBACEuB,IAAOD,EARF,mCAQ4BA,EAT3C,6EAUUE,IAAKJ,KAEP,mCAAWA,MACX,uCAAeC,OANFD,EADP,SAad,SAACvB,EAAD,WACE,+CAGL,C","sources":["pages/CastPage/CastPage.styled.js","pages/CastPage/CastPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.div`\n  padding-top: 25px;\n  padding-bottom: 25px;\n`;\nexport const CastList = styled.ul`\n  display: flex; \n  justify-content :center;\n  flex-wrap: wrap;\n  gap: 20px;\n  @media screen and (min-width: 1200px) {\n    justify-content :flex-start;\n  } \n`;\nexport const CastItem = styled.li`\n  width: 150px;\n  list-style: none;\n`;  ","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Loader from 'components/Loader/Loader';\n\nimport { Section, CastList, CastItem } from './CastPage.styled';\n\nconst CastPage = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n  useEffect(() => {\n    setLoading(true);\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=0bcfcb05021399706be632b43954eb5a&language=en-US`\n    )\n      .then(res => res.json())\n      .then(data => {\n        const { cast } = data;\n        setCast(cast);\n      })\n      .catch(() => {\n        toast.error('Something went wrong');\n      })\n      .finally(() => setLoading(false));\n  }, [movieId]);\n  if (loading) {\n    return <Loader />;\n  }\n  const NO_IMAGE =\n    'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg';\n  const IMG_PATH = 'https://image.tmdb.org/t/p/w500/';\n\n  return cast.length ? (\n    <Section>\n      <CastList>\n        {cast.map(({ name, character, profile_path }) => (\n          <CastItem key={name}>\n            <img\n              src={!!profile_path ? IMG_PATH + profile_path : NO_IMAGE}\n              alt={name}\n            />\n            <p>Actor: {name}</p>\n            <p>Character: {character}</p>\n          </CastItem>\n        ))}\n      </CastList>\n    </Section>\n  ) : (\n    <Section>\n      <p>Cast list is empty</p>\n    </Section>\n  );\n};\n\nexport default CastPage;\n"],"names":["Section","styled","CastList","CastItem","useState","cast","setCast","loading","setLoading","movieId","useParams","useEffect","fetch","then","res","json","data","catch","toast","finally","Loader","length","map","name","character","profile_path","src","alt"],"sourceRoot":""}